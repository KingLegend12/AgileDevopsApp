[{"/Users/drissjd/Desktop/AgileProject/agile_frontend/src/index.js":"1","/Users/drissjd/Desktop/AgileProject/agile_frontend/src/store.js":"2","/Users/drissjd/Desktop/AgileProject/agile_frontend/src/App.js":"3","/Users/drissjd/Desktop/AgileProject/agile_frontend/src/layout/DefaultLayout.js":"4","/Users/drissjd/Desktop/AgileProject/agile_frontend/src/pages/dashboard/Dashboard.page.js":"5","/Users/drissjd/Desktop/AgileProject/agile_frontend/src/pages/ticket/Ticket.page.js":"6","/Users/drissjd/Desktop/AgileProject/agile_frontend/src/pages/registration/Registration.page.js":"7","/Users/drissjd/Desktop/AgileProject/agile_frontend/src/pages/ticket-lists/ticketSlice.js":"8","/Users/drissjd/Desktop/AgileProject/agile_frontend/src/pages/ticket-lists/TicketLists.page.js":"9","/Users/drissjd/Desktop/AgileProject/agile_frontend/src/pages/dashboard/userSlice.js":"10","/Users/drissjd/Desktop/AgileProject/agile_frontend/src/pages/entry/Entry.page.js":"11","/Users/drissjd/Desktop/AgileProject/agile_frontend/src/components/registration-form/userRegistrationSlice.js":"12","/Users/drissjd/Desktop/AgileProject/agile_frontend/src/components/new-ticket/Addticketpage.js":"13","/Users/drissjd/Desktop/AgileProject/agile_frontend/src/pages/verification/UserVerification.page.js":"14","/Users/drissjd/Desktop/AgileProject/agile_frontend/src/components/login/Login.Slice.js":"15","/Users/drissjd/Desktop/AgileProject/agile_frontend/src/components/private-route/PrivateRoute.comp.js":"16","/Users/drissjd/Desktop/AgileProject/agile_frontend/src/components/add-ticket-from/add-ticketSlicer.js":"17","/Users/drissjd/Desktop/AgileProject/agile_frontend/src/pages/ticket-lists/ticketsAction.js":"18","/Users/drissjd/Desktop/AgileProject/agile_frontend/src/components/add-ticket-from/AddTicketForm.comp.js":"19","/Users/drissjd/Desktop/AgileProject/agile_frontend/src/components/login/Login.comp.js":"20","/Users/drissjd/Desktop/AgileProject/agile_frontend/src/components/registration-form/RegistrationForm.comp.js":"21","/Users/drissjd/Desktop/AgileProject/agile_frontend/src/layout/partial/Footer.comp.js":"22","/Users/drissjd/Desktop/AgileProject/agile_frontend/src/pages/dashboard/userAction.js":"23","/Users/drissjd/Desktop/AgileProject/agile_frontend/src/layout/partial/Header.comp.js":"24","/Users/drissjd/Desktop/AgileProject/agile_frontend/src/components/breadcrumb/Breadcrumb.comp.js":"25","/Users/drissjd/Desktop/AgileProject/agile_frontend/src/components/Ticket-table/TicketTable.comp.js":"26","/Users/drissjd/Desktop/AgileProject/agile_frontend/src/components/update-ticket/UpdateTicket.comp.js":"27","/Users/drissjd/Desktop/AgileProject/agile_frontend/src/components/message-history/MessageHistory.comp.js":"28","/Users/drissjd/Desktop/AgileProject/agile_frontend/src/password-reset/PasswordReset.comp.js":"29","/Users/drissjd/Desktop/AgileProject/agile_frontend/src/components/search-form/SearchForm.comp.js":"30","/Users/drissjd/Desktop/AgileProject/agile_frontend/src/api/userApi.js":"31","/Users/drissjd/Desktop/AgileProject/agile_frontend/src/api/ticketApi.js":"32","/Users/drissjd/Desktop/AgileProject/agile_frontend/src/components/registration-form/userRegAction.js":"33","/Users/drissjd/Desktop/AgileProject/agile_frontend/src/components/add-ticket-from/add-ticketAction.js":"34","/Users/drissjd/Desktop/AgileProject/agile_frontend/src/utils/validation.js":"35"},{"size":594,"mtime":1625048882536,"results":"36","hashOfConfig":"37"},{"size":620,"mtime":1625729964354,"results":"38","hashOfConfig":"37"},{"size":1532,"mtime":1625827267150,"results":"39","hashOfConfig":"37"},{"size":420,"mtime":1623628364373,"results":"40","hashOfConfig":"37"},{"size":2133,"mtime":1625684904519,"results":"41","hashOfConfig":"37"},{"size":3420,"mtime":1626302686374,"results":"42","hashOfConfig":"37"},{"size":441,"mtime":1625730371076,"results":"43","hashOfConfig":"37"},{"size":2456,"mtime":1625219384566,"results":"44","hashOfConfig":"37"},{"size":1261,"mtime":1625684664721,"results":"45","hashOfConfig":"37"},{"size":649,"mtime":1625129714505,"results":"46","hashOfConfig":"37"},{"size":939,"mtime":1625127294424,"results":"47","hashOfConfig":"37"},{"size":785,"mtime":1625729701874,"results":"48","hashOfConfig":"37"},{"size":1103,"mtime":1623680575983,"results":"49","hashOfConfig":"37"},{"size":1206,"mtime":1625824988883,"results":"50","hashOfConfig":"37"},{"size":645,"mtime":1625128233178,"results":"51","hashOfConfig":"37"},{"size":1351,"mtime":1625214465469,"results":"52","hashOfConfig":"37"},{"size":807,"mtime":1625669276320,"results":"53","hashOfConfig":"37"},{"size":2293,"mtime":1626283711071,"results":"54","hashOfConfig":"37"},{"size":5449,"mtime":1626185139457,"results":"55","hashOfConfig":"37"},{"size":3302,"mtime":1639230234190,"results":"56","hashOfConfig":"37"},{"size":6779,"mtime":1625813601002,"results":"57","hashOfConfig":"37"},{"size":176,"mtime":1639248181426,"results":"58","hashOfConfig":"37"},{"size":463,"mtime":1625129678189,"results":"59","hashOfConfig":"37"},{"size":2050,"mtime":1639247930313,"results":"60","hashOfConfig":"37"},{"size":394,"mtime":1625134386553,"results":"61","hashOfConfig":"37"},{"size":3491,"mtime":1626287113476,"results":"62","hashOfConfig":"37"},{"size":1283,"mtime":1625656235177,"results":"63","hashOfConfig":"37"},{"size":1352,"mtime":1626109668245,"results":"64","hashOfConfig":"37"},{"size":1360,"mtime":1624267623867,"results":"65","hashOfConfig":"37"},{"size":978,"mtime":1625063816369,"results":"66","hashOfConfig":"37"},{"size":2899,"mtime":1639318044994,"results":"67","hashOfConfig":"37"},{"size":2232,"mtime":1639318308808,"results":"68","hashOfConfig":"37"},{"size":570,"mtime":1625729764188,"results":"69","hashOfConfig":"37"},{"size":664,"mtime":1625672747859,"results":"70","hashOfConfig":"37"},{"size":72,"mtime":1623680574532,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1hod631",{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"132","messages":"133","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"137","messages":"138","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/drissjd/Desktop/AgileProject/agile_frontend/src/index.js",[],"/Users/drissjd/Desktop/AgileProject/agile_frontend/src/store.js",[],"/Users/drissjd/Desktop/AgileProject/agile_frontend/src/App.js",["155","156","157"],"import \"./App.css\";\nimport { Button } from \"react-bootstrap\";\nimport Entry from \"./pages/entry/Entry.page\";\nimport { DefaultLayout } from \"./layout/DefaultLayout\";\nimport { Dashboard } from \"./pages/dashboard/Dashboard.page\";\nimport { AddTicketPage } from \"./components/new-ticket/Addticketpage\";\nimport { TicketLists } from \"./pages/ticket-lists/TicketLists.page\";\nimport { Ticket } from \"./pages/ticket/Ticket.page\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport { PrivateRoute } from \"./components/private-route/PrivateRoute.comp\";\nimport { Registration } from \"./pages/registration/Registration.page\";\nimport { UserVerification } from \"./pages/verification/UserVerification.page\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route exact path=\"/\">\n            <Entry />\n          </Route>\n          <Route exact path=\"/registration\">\n            <Registration />\n          </Route>\n          <Route exact path=\"/verification/:_id/:email\">\n            <UserVerification />\n          </Route>\n          <PrivateRoute path=\"/dashboard\">\n            <Dashboard />\n          </PrivateRoute>\n          <PrivateRoute path=\"/add-ticket\">\n            <AddTicketPage />\n          </PrivateRoute>\n          <PrivateRoute path=\"/tickets\">\n            <TicketLists />\n          </PrivateRoute>\n          <Route path=\"/ticket/:tId\">\n            <Ticket />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/drissjd/Desktop/AgileProject/agile_frontend/src/layout/DefaultLayout.js",[],"/Users/drissjd/Desktop/AgileProject/agile_frontend/src/pages/dashboard/Dashboard.page.js",["158","159"],"import React, { useEffect, useState } from \"react\";\nimport { Col, Row, Button, Container } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchAllTickets } from \"../../pages/ticket-lists/ticketsAction\";\nimport { TicketTable } from \"../../components/Ticket-table/TicketTable.comp\";\n//import tickets from \"../../assets/data/dummy-tickets.json\";\nimport \"./DashboardStyling.css\";\nimport { PageBreadcrumb } from \"../../components/breadcrumb/Breadcrumb.comp\";\nimport { Link } from \"react-router-dom\";\nexport const Dashboard = () => {\n  const dispatch = useDispatch();\n  const refreshPage = () => {\n    window.location.reload();\n  };\n  const [str, setStr] = useState(\"\");\n  useEffect(() => {\n    dispatch(fetchAllTickets());\n  }, [str, dispatch]);\n  const { tickets } = useSelector((state) => state.tickets);\n  const pendingtickets = tickets.filter((row) => row.status !== \"Fermer\");\n  const totaltickets = tickets.length;\n  return (\n    <Container>\n      <hr />\n\n      <Row>\n        <Col>\n          <PageBreadcrumb page=\"Dashboard\" />\n        </Col>\n      </Row>\n      <Row>\n        <Col className=\"text-center mt-5 mb-2\">\n          <Link to=\"/add-ticket\">\n            <Button\n              className=\"HeaderBTN\"\n              variant=\"success\"\n              style={{\n                \"font-size\": \"2rem\",\n                \"border-radius\": \"2rem\",\n              }}\n            >\n              Ajouter un Ticket\n            </Button>\n          </Link>\n        </Col>\n      </Row>\n      <Row>\n        <Col className=\"text-center mb-2\">\n          <div>\n            <h2>Total des tickets: {totaltickets}</h2>\n          </div>\n          <div>\n            <h2>Mes tickets en attente: {pendingtickets.length}</h2>\n          </div>\n        </Col>\n      </Row>\n      <Row>\n        <Col\n          className=\"text-center mb-2\"\n          style={{\n            \"font-size\": \"1.5rem\",\n          }}\n        >\n          Ticket Ajouté recently\n        </Col>\n      </Row>\n      <hr />\n      <Row>\n        <Col className=\"recent-ticket\">\n          <TicketTable />\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n","/Users/drissjd/Desktop/AgileProject/agile_frontend/src/pages/ticket/Ticket.page.js",["160","161","162","163","164","165"],"import React, { useState, useEffect } from \"react\";\nimport { Container, Row, Col, Button, Spinner, Alert } from \"react-bootstrap\";\nimport { PageBreadcrumb } from \"../../components/breadcrumb/Breadcrumb.comp\";\nimport tickets from \"../../assets/data/dummy-tickets.json\";\nimport { MessageHistory } from \"../../components/message-history/MessageHistory.comp\";\nimport { UpdateTicket } from \"../../components/update-ticket/UpdateTicket.comp\";\nimport { useParams } from \"react-router-dom\";\nimport { fetchSingleTicket, closeTicket } from \"../ticket-lists/ticketsAction\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Header } from \"../../layout/partial/Header.comp\";\nimport { resetResponseMsg } from \"../ticket-lists/ticketSlice\";\n//const ticket = tickets[0];\nexport const Ticket = () => {\n  const { tId } = useParams();\n  const [message, setMessage] = useState(\"\");\n  const [ticket, setTicket] = useState(\"\");\n  const {\n    isLoading,\n    error,\n    selectedTicket,\n    replyMsg,\n    replyTicketError,\n  } = useSelector((state) => state.tickets);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    {\n      /* for (let i = 0; i < tickets.length; i++) {\n      if (tickets[i].id == tId) {\n        setTicket(tickets[i]);\n        continue; //break the loop\n      }\n    } */\n    }\n    dispatch(fetchSingleTicket(tId));\n\n    return () => {\n      (replyMsg || replyTicketError) && dispatch(resetResponseMsg());\n    };\n  }, [message, tId, dispatch, replyMsg, replyTicketError]);\n  const handleOnChange = (e) => {\n    setMessage(e.target.value);\n  };\n  const handleOnSubmit = () => {\n    alert(\"submiitted\");\n  };\n  return (\n    <>\n      {\" \"}\n      <Header />\n      <Container>\n        <hr />\n        <Row>\n          <Col>\n            <PageBreadcrumb page=\"Ticket\" />\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            {isLoading && <Spinner variant=\"primary\" animation=\"border\" />}\n            {error && <Alert variant=\"danger\">{error}</Alert>}\n            {replyTicketError && (\n              <Alert variant=\"danger\">{replyTicketError}</Alert>\n            )}\n            {replyMsg && <Alert variant=\"success\">{replyMsg}</Alert>}\n          </Col>\n        </Row>\n        <Row>\n          {tId}\n          <Col>\n            <div className=\"subject\">Sujet: {selectedTicket.subject}</div>\n            <div className=\"date\">\n              Date de reclammation:{\" \"}\n              {selectedTicket.openAt &&\n                new Date(selectedTicket.openAt).toLocaleString()}\n            </div>\n            <div className=\"status\">Status: {selectedTicket.status}</div>\n            <div className=\"priority\">Priorite {selectedTicket.priority}</div>\n          </Col>\n          <Col className=\"text-right\">\n            <Button\n              variant=\"outline-info\"\n              onClick={() => dispatch(closeTicket(tId))}\n              disabled={selectedTicket.status === \"Fermer\"}\n            >\n              Fermer le ticket\n            </Button>\n          </Col>\n        </Row>\n        <Row className=\"mt-4\">\n          <Col>\n            {selectedTicket.conversations && (\n              <MessageHistory msg={selectedTicket.conversations} />\n            )}\n          </Col>\n        </Row>\n        <hr style={{ backgroundColor: \"orange\" }} />\n        <Row className=\"mt-4\">\n          <Col>\n            <UpdateTicket _id={tId} />\n          </Col>\n        </Row>\n      </Container>{\" \"}\n    </>\n  );\n};\n","/Users/drissjd/Desktop/AgileProject/agile_frontend/src/pages/registration/Registration.page.js",[],"/Users/drissjd/Desktop/AgileProject/agile_frontend/src/pages/ticket-lists/ticketSlice.js",[],"/Users/drissjd/Desktop/AgileProject/agile_frontend/src/pages/ticket-lists/TicketLists.page.js",["166","167"],"import React, { useState, useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { fetchAllTickets } from \"./ticketsAction\";\nimport { Container, Row, Col, Button } from \"react-bootstrap\";\nimport { PageBreadcrumb } from \"../../components/breadcrumb/Breadcrumb.comp\";\nimport { SearchForm } from \"../../components/search-form/SearchForm.comp\";\nimport { TicketTable } from \"../../components/Ticket-table/TicketTable.comp\";\nimport tickets from \"../../assets/data/dummy-tickets.json\";\nimport { Link } from \"react-router-dom\";\nexport const TicketLists = () => {\n  const dispatch = useDispatch();\n  const [str, setStr] = useState(\"\");\n\n  useEffect(() => {\n    dispatch(fetchAllTickets());\n  }, [str, dispatch]);\n\n  return (\n    <Container>\n      <Row>\n        <Col>\n          <hr />\n          <PageBreadcrumb page=\"Ticket Lists\" />\n        </Col>\n      </Row>\n      <Row className=\"mt-4\">\n        <Col>\n          <Link to=\"/add-ticket\">\n            <Button variant=\"info\">Ajouter un nouveau Ticket</Button>\n          </Link>\n        </Col>\n        <Col className=\"text-right\">\n          <SearchForm />\n        </Col>\n      </Row>\n      <hr />\n      <Row>\n        <Col>\n          <TicketTable />\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n","/Users/drissjd/Desktop/AgileProject/agile_frontend/src/pages/dashboard/userSlice.js",[],"/Users/drissjd/Desktop/AgileProject/agile_frontend/src/pages/entry/Entry.page.js",[],"/Users/drissjd/Desktop/AgileProject/agile_frontend/src/components/registration-form/userRegistrationSlice.js",[],"/Users/drissjd/Desktop/AgileProject/agile_frontend/src/components/new-ticket/Addticketpage.js",["168","169","170"],"import React, { useState, useEffect } from \"react\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport { PageBreadcrumb } from \"../breadcrumb/Breadcrumb.comp\";\nimport { AddTicketForm } from \"../add-ticket-from/AddTicketForm.comp\";\n//import { shortText } from \"../../utils/validation\";\n//import { shortText } from \"../../utils/validation\";\n\nconst initialFrmDt = {\n  subject: \"\",\n  issueDate: \"\",\n  detail: \"\",\n};\n\nexport const AddTicketPage = () => {\n  const [frmData, setFrmData] = useState(initialFrmDt);\n\n  const handleOnChange = (e) => {\n    const { name, value } = e.target;\n\n    setFrmData({\n      ...frmData,\n      [name]: value,\n    });\n  };\n\n  const handleOnSubmit = async (e) => {\n    e.preventDefault();\n\n    //const isSubjectValid = await shortText(frmData.subject);\n\n    console.log(\"Form submit request received\", frmData);\n  };\n\n  return (\n    <Container>\n      <hr />\n      <Row>\n        <Col>\n          <PageBreadcrumb page=\"New Ticket\" />\n        </Col>\n      </Row>\n\n      <Row>\n        <Col>\n          <AddTicketForm />\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n","/Users/drissjd/Desktop/AgileProject/agile_frontend/src/pages/verification/UserVerification.page.js",["171"],"import React, { useEffect, useState } from \"react\";\nimport { Jumbotron, Spinner, Alert } from \"react-bootstrap\";\nimport { useParams } from \"react-router-dom\";\n\nimport { userRegistrationVerification } from \"../../api/userApi\";\n\nimport \"./userVerfication.style.css\";\n\nconst initialResponse = {\n  status: \"\",\n  message: \"\",\n};\nexport const UserVerification = () => {\n  const { _id, email } = useParams();\n  const dt = { _id, email };\n\n  const [response, setResponse] = useState(initialResponse);\n\n  useEffect(() => {\n    const apiCall = async () => {\n      const result = await userRegistrationVerification(dt);\n      setResponse(result);\n    };\n\n    !response.status && apiCall();\n  }, [response]);\n\n  //call api and send the _id to verify user\n\n  return (\n    <div className=\"registration-page\">\n      <div className=\"mt-5\">\n        <Jumbotron className=\"form-box\">\n          {!response.status && <Spinner variant=\"info\" animation=\"border\" />}\n\n          {response.status && (\n            <Alert\n              variant={response.status === \"success\" ? \"success\" : \"danger\"}\n            >\n              {response.message}\n            </Alert>\n          )}\n        </Jumbotron>\n      </div>\n    </div>\n  );\n};\n","/Users/drissjd/Desktop/AgileProject/agile_frontend/src/components/login/Login.Slice.js",[],"/Users/drissjd/Desktop/AgileProject/agile_frontend/src/components/private-route/PrivateRoute.comp.js",[],"/Users/drissjd/Desktop/AgileProject/agile_frontend/src/components/add-ticket-from/add-ticketSlicer.js",[],"/Users/drissjd/Desktop/AgileProject/agile_frontend/src/pages/ticket-lists/ticketsAction.js",["172"],"import axios from \"axios\";\n\nimport {\n  fetchTicketLoading,\n  fetchTicketSuccess,\n  fetchTicketFail,\n  searchTickets,\n  fetchSingleTicketLoading,\n  fetchSingleTicketSuccess,\n  fetchSingleTicketFail,\n  replyTicketLoading,\n  replyTicketSuccess,\n  replyTicketFail,\n  closeTicketLoading,\n  closeTicketSuccess,\n  closeTicketFail,\n} from \"./ticketSlice\";\n\nimport {\n  getAllTickets,\n  getSingleTicket,\n  updateReplyTicket,\n  updateTicketStatusClosed,\n} from \"../../api/ticketApi\";\nexport const fetchAllTickets = () => async (dispatch) => {\n  dispatch(fetchTicketLoading());\n\n  try {\n    const result = await getAllTickets();\n    dispatch(fetchTicketSuccess(result.data.result));\n    if (!result.data.result) {\n      dispatch(fetchTicketFail({ message: \"error couldn't load\" }));\n    }\n    //console.log(result);\n  } catch (error) {\n    dispatch(fetchTicketFail(error.message));\n  }\n};\n\nexport const filterSearchTicket = (str) => (dispatch) => {\n  dispatch(searchTickets(str));\n};\n\nexport const fetchSingleTicket = (_id) => async (dispatch) => {\n  dispatch(fetchSingleTicketLoading());\n  try {\n    const result = await getSingleTicket(_id);\n    dispatch(\n      fetchSingleTicketSuccess(\n        result.data.result.length && result.data.result[0]\n      )\n    );\n  } catch (error) {\n    dispatch(fetchSingleTicketFail(error.message));\n  }\n};\n\nexport const replyOnTicket = (_id, msgObj) => async (dispatch) => {\n  dispatch(replyTicketLoading());\n  try {\n    const result = await updateReplyTicket(_id, msgObj);\n    console.log(result);\n    if (result.status === \"error\") {\n      return dispatch(replyTicketFail(result.message));\n    }\n\n    dispatch(fetchSingleTicket(_id));\n\n    dispatch(replyTicketSuccess(\"Message envoyée avec succes\"));\n  } catch (error) {\n    console.log(error.message);\n    dispatch(replyTicketFail(error.message));\n  }\n};\n\nexport const closeTicket = (_id) => async (dispatch) => {\n  dispatch(closeTicketLoading());\n  try {\n    const result = await updateTicketStatusClosed(_id);\n    if (result.status === \"error\") {\n      return dispatch(closeTicketFail(result.message));\n    }\n\n    dispatch(fetchSingleTicket(_id));\n\n    dispatch(closeTicketSuccess(\"Ce ticket est fermé\"));\n  } catch (error) {\n    console.log(error.message);\n    dispatch(closeTicketFail(error.message));\n  }\n};\n","/Users/drissjd/Desktop/AgileProject/agile_frontend/src/components/add-ticket-from/AddTicketForm.comp.js",["173","174","175","176"],"import React, { useState, useEffect } from \"react\";\nimport {\n  Jumbotron,\n  Form,\n  Button,\n  Row,\n  Col,\n  Spinner,\n  Alert,\n} from \"react-bootstrap\";\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\nimport PropTypes from \"prop-types\";\nimport { shortText } from \"../../utils/validation\";\nimport \"./add-ticket-form.style.css\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { openNewTicket } from \"./add-ticketAction\";\nimport { restSuccessMSg } from \"./add-ticketSlicer\";\nconst initialFrmDt = {\n  subject: \"\",\n  issueDate: \"\",\n  message: \"\",\n};\nconst initialFrmError = {\n  subject: false,\n  issueDate: false,\n  message: false,\n};\n\nexport const AddTicketForm = () => {\n  const [frmData, setFrmData] = useState(initialFrmDt);\n  const [frmDataError, setFrmDataError] = useState(initialFrmError);\n  const [cmbvalue, setcmbValue] = useState(\"Selectioner\");\n  const [typevalue, settypeValue] = useState(\"Selectioner\");\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    successMsg && dispatch(restSuccessMSg());\n  }, [dispatch, frmData, frmDataError]);\n\n  const { isLoading, error, successMsg } = useSelector(\n    (state) => state.openTicket\n  );\n  const {\n    user: { name },\n  } = useSelector((state) => state.user);\n\n  const handleSelect = (e) => {\n    console.log(e);\n    setcmbValue(e);\n  };\n  const handleSelect2 = (e) => {\n    console.log(e);\n    settypeValue(e);\n  };\n  const handleOnChange = (e) => {\n    const { name, value } = e.target;\n\n    setFrmData({\n      ...frmData,\n      [name]: value,\n    });\n    console.log(name, value);\n  };\n  const handleOnSubmit = async (e) => {\n    e.preventDefault();\n    setFrmDataError(initialFrmError);\n    const isSubjectValid = await shortText(frmData.subject);\n\n    setFrmDataError({\n      ...initialFrmError,\n      subject: !isSubjectValid,\n    });\n    dispatch(\n      openNewTicket({\n        ...frmData,\n        sender: name,\n        priority: cmbvalue,\n        speciality: typevalue,\n      })\n    );\n    //console.log(\"Form submit request received\", frmData);\n  };\n\n  return (\n    <Jumbotron style={{ background: \"none\" }} className=\"mt-3 add-new-ticket\">\n      <h1 className=\"text-center\">Ajouter un Nouveau Ticket</h1>\n      <hr style={{ backgroundColor: \"orangered\" }} />\n      <div>\n        {error && <Alert variant=\"danger\">{error}</Alert>}\n        {successMsg && <Alert variant=\"primary\">{successMsg}</Alert>}\n        {isLoading && <Spinner variant=\"primary\" animation=\"border\" />}\n      </div>\n      <Form autoComplete=\"off\" onSubmit={handleOnSubmit}>\n        <Form.Group>\n          <Form.Label>Sujet</Form.Label>\n          <Form.Control\n            name=\"subject\"\n            value={frmData.subject}\n            onChange={handleOnChange}\n            minLength=\"3\"\n            maxLength=\"50\"\n            placeholder=\"Entrez le sujet de votre reclamation\"\n            required\n          />\n          <Form.Text className=\"text-danger\">\n            {/*frmDataError.subject && \"Subject is required !\"*/}\n          </Form.Text>\n        </Form.Group>\n        <Form.Group>\n          <Form.Label>Date de l'incident</Form.Label>\n          <Form.Control\n            type=\"date\"\n            name=\"issueDate\"\n            placeholder=\"jj-mm-aaaa\"\n            value={frmData.issueDate}\n            onChange={handleOnChange}\n            required\n          />\n        </Form.Group>\n        <Form.Group>\n          <Form.Label>Les details</Form.Label>\n          <Form.Control\n            as=\"textarea\"\n            name=\"message\"\n            value={frmData.message}\n            onChange={handleOnChange}\n            placeholder=\"Decrivez votre Problème \"\n            required\n          />\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label>Priorité</Form.Label>\n          <DropdownButton\n            alignRight\n            title={cmbvalue}\n            value={cmbvalue}\n            id=\"dropdown-menu-align-right\"\n            onSelect={handleSelect}\n            required\n          >\n            <Dropdown.Item style={{ backgroundColor: \"red\" }} eventKey=\"Elevée\">\n              Elevée\n            </Dropdown.Item>\n            <Dropdown.Item\n              style={{ backgroundColor: \"orange\" }}\n              eventKey=\"Moyenne\"\n            >\n              Moyenne\n            </Dropdown.Item>\n            <Dropdown.Item\n              style={{ backgroundColor: \"green\" }}\n              eventKey=\"Basse\"\n            >\n              Basse\n            </Dropdown.Item>\n          </DropdownButton>\n        </Form.Group>\n        <Form.Group>\n          <Form.Label>Type:</Form.Label>\n          <DropdownButton\n            alignRight\n            title={typevalue}\n            value={typevalue}\n            id=\"dropdown-menu-align-right\"\n            onSelect={handleSelect2}\n            required\n          >\n            <Dropdown.Item eventKey=\"Pedagogique\">Pedagogique</Dropdown.Item>\n            <Dropdown.Item eventKey=\"Technique\">Technique</Dropdown.Item>\n            <Dropdown.Item eventKey=\"Réseau\">Réseau</Dropdown.Item>\n          </DropdownButton>\n        </Form.Group>\n        <Button type=\"submit\" variant=\"info\">\n          Envoyer\n        </Button>\n      </Form>\n    </Jumbotron>\n  );\n};\n// AddTicketForm.propTypes = {\n//   handleOnSubmit: PropTypes.func.isRequired,\n//   handleOnChange: PropTypes.func.isRequired,\n//   frmDt: PropTypes.object.isRequired,\n//   frmDataErro: PropTypes.object.isRequired,\n// };\n","/Users/drissjd/Desktop/AgileProject/agile_frontend/src/components/login/Login.comp.js",["177"],"import React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { getUserProfile } from \"../../pages/dashboard/userAction\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport {\n  Container,\n  Row,\n  Col,\n  Form,\n  Button,\n  Spinner,\n  Alert,\n} from \"react-bootstrap\";\nimport { loginPending, loginSuccess, loginFail } from \"./Login.Slice\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { userLogin } from \"../../api/userApi\";\nexport const LoginForm = ({ frmSwitcher }) => {\n  const dispatch = useDispatch();\n  const history = useHistory();\n  let location = useLocation();\n  const { isLoading, error } = useSelector((state) => state.login);\n  useEffect(() => {\n    sessionStorage.getItem(\"accessJWT\") && history.push(\"/dashboard\");\n  }, [history]);\n  const [email, setEmail] = useState(\"fakeemail@email.com\");\n  const [password, setPassword] = useState(\"sfsd#3Dsga\");\n\n  const handleOnChange = (e) => {\n    const { name, value } = e.target;\n\n    switch (name) {\n      case \"email\":\n        setEmail(value);\n        break;\n      case \"password\":\n        setPassword(value);\n        break;\n      default:\n        break;\n    }\n    console.log(name, value);\n  };\n  const handleOnSubmit = async (e) => {\n    e.preventDefault();\n    if (!email || !password) {\n      alert(\"Veuillez remplir les champs\");\n    }\n    dispatch(loginPending());\n    try {\n      const isAuth = await userLogin({ email, password });\n\n      if (isAuth.status === \"error\") {\n        return dispatch(loginFail(isAuth.message));\n      }\n\n      dispatch(loginSuccess());\n      dispatch(getUserProfile());\n      history.push(\"/dashboard\");\n    } catch (error) {\n      dispatch(loginFail(error.message));\n    }\n  };\n  return (\n    <Container>\n      <Row>\n        <Col>\n          <h1 className=\"text-info text-center\">Se Connecter</h1>\n          <hr></hr>\n          {error && <Alert variant=\"danger\">{error}</Alert>}\n          <Form autoComplete=\"off\" onSubmit={handleOnSubmit}>\n            <Form.Group>\n              <Form.Label>Addresse Email</Form.Label>\n              <Form.Control\n                type=\"email\"\n                name=\"email\"\n                onChange={handleOnChange}\n                value={email}\n                placeholder=\"Entrez votre addresse email\"\n                required\n              />\n            </Form.Group>\n            <Form.Group>\n              <Form.Label>Mot de passe</Form.Label>\n              <Form.Control\n                type=\"password\"\n                name=\"password\"\n                onChange={handleOnChange}\n                value={password}\n                placeholder=\"Mot de passe\"\n                required\n              />\n            </Form.Group>\n            <Button type=\"submit\">Se connecter</Button>\n            {isLoading && <Spinner variant=\"primary\" animation=\"border\" />}\n          </Form>\n          <hr />\n        </Col>\n      </Row>\n\n      <Row>\n        <Col>\n          <a href=\"#!\" onClick={() => frmSwitcher(\"reset\")}>\n            Mot de passe oublié ?\n          </a>\n        </Col>\n      </Row>\n      <Row className=\"py-4\">\n        <Col>\n          <a href=\"/registration\">Créer un compte</a>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\nLoginForm.propTypes = {\n  frmSwitcher: PropTypes.func.isRequired,\n};\n","/Users/drissjd/Desktop/AgileProject/agile_frontend/src/components/registration-form/RegistrationForm.comp.js",[],"/Users/drissjd/Desktop/AgileProject/agile_frontend/src/layout/partial/Footer.comp.js",[],"/Users/drissjd/Desktop/AgileProject/agile_frontend/src/pages/dashboard/userAction.js",[],"/Users/drissjd/Desktop/AgileProject/agile_frontend/src/layout/partial/Header.comp.js",["178","179","180"],"import React from \"react\";\nimport { Navbar, Nav, Button } from \"react-bootstrap\";\nimport logo from \"../../assets/img/dev.png\";\nimport \"./FooterButtons.css\";\nimport { Link } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Collapse from \"react-bootstrap/Collapse\";\nimport { useHistory } from \"react-router-dom\";\nimport { LinkContainer } from \"react-router-bootstrap\";\nimport { userLogout } from \"../../api/userApi\";\nexport const Header = () => {\n  const history = useHistory();\n  const logMeOut = () => {\n    sessionStorage.removeItem(\"accessJWT\");\n    localStorage.removeItem(\"crmSite\");\n    userLogout();\n    history.push(\"/\");\n  };\n  const { user } = useSelector((state) => state.user);\n  return (\n    <Navbar collapseOnSelect bg=\"\" variant=\"dark\" expand=\"md\">\n      <Navbar.Brand>\n        <img src={logo} alt=\"logo\" width=\"65px\" />\n      </Navbar.Brand>\n      <h3\n        style={{\n          \"text-shadow\":\n            \"0 0 4px #fff, 0 0 11px #fff, 0 0 19px #fff, 0 0 40px orangered, 0 0 80px orangered, 0 0 90px orangered, 0 0 100px orangered, 0 0 150px orangered\",\n        }}\n      >\n        Bienvenue {user.name}\n      </h3>\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n      <Navbar.Collapse id=\"basic-navbar-nav\">\n        <Nav className=\"ml-auto\">\n          <LinkContainer to=\"/dashboard\">\n            <Nav.Link>\n              <Button variant=\"outline-light\" size=\"lg\" className=\"HeaderBTN\">\n                L'interface\n              </Button>\n            </Nav.Link>\n          </LinkContainer>\n          <LinkContainer to=\"/tickets\">\n            <Nav.Link>\n              <Button variant=\"outline-light\" size=\"lg\" className=\"HeaderBTN\">\n                Les tickets\n              </Button>\n            </Nav.Link>\n          </LinkContainer>\n          <Nav.Link onClick={logMeOut}>\n            <Button variant=\"outline-light\" size=\"lg\" className=\"HeaderBTN\">\n              Se Deconnecter\n            </Button>\n          </Nav.Link>\n        </Nav>\n      </Navbar.Collapse>\n    </Navbar>\n  );\n};\n","/Users/drissjd/Desktop/AgileProject/agile_frontend/src/components/breadcrumb/Breadcrumb.comp.js",[],"/Users/drissjd/Desktop/AgileProject/agile_frontend/src/components/Ticket-table/TicketTable.comp.js",["181","182","183"],"import React, { useEffect } from \"react\";\nimport { BoxLoading, WindMillLoading } from \"react-loadingg\";\nimport { Table, Container, Col } from \"react-bootstrap\";\nimport { useSelector } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport paginationFactory from \"react-bootstrap-table2-paginator\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport { fetchAllTickets } from \"../../pages/ticket-lists/ticketsAction\";\nimport { useDispatch } from \"react-redux\";\n\nexport const TicketTable = () => {\n  const dispatch = useDispatch();\n  const { searchTicketList, isLoading, error } = useSelector(\n    (state) => state.tickets\n  );\n  useEffect(() => {\n    dispatch(fetchAllTickets());\n  }, [dispatch]);\n  const data = searchTicketList;\n  if (isLoading)\n    return (\n      <div>\n        <WindMillLoading />\n        <h3\n          style={{\n            \"text-align\": \"center\",\n            \"margin-top\": \"150px\",\n            color: \"cyan\",\n          }}\n        >\n          Loading...\n        </h3>\n      </div>\n    );\n\n  if (error) return <h3>{error}</h3>;\n\n  const columns = [\n    {\n      dataField: \"_id\",\n      text: \"Identifiant du ticket\",\n    },\n    {\n      dataField: \"subject\",\n      text: \"Sujet\",\n      formatter: (cell, row, rowIndex, extraData) => (\n        <Link to={`/ticket/${row._id}`}>{row.subject}</Link>\n      ),\n    },\n    { dataField: \"status\", text: \"Status\" },\n    {\n      dataField: \"priority\",\n      text: \"Priorité\",\n      style: (cell, row, rowIndex, colIndex) => {\n        if (cell === \"Elevée\") {\n          return {\n            backgroundColor: \"red\",\n          };\n        } else if (cell === \"Moyenne\") {\n          return {\n            backgroundColor: \"orange\",\n          };\n        }\n        return {\n          backgroundColor: \"green\",\n        };\n      },\n    },\n    { dataField: \"openAt\", text: \"Date d'ouverture\" },\n  ];\n  return (\n    <Container>\n      {/*<Table className=\"table table-striped table-dark\" hover>\n        <thead>\n          <tr>\n            <th>Identifiant du ticket</th>\n            <th>Sujet</th>\n            <th>Status</th>\n            <th>Priorité</th>\n            <th>Date d'ouverture</th>\n          </tr>\n        </thead>\n        <tbody>\n          {searchTicketList.length ? (\n            searchTicketList.map((row) => (\n              <tr>\n                <td>{row._id}</td>\n                <td>\n                  <Link to={`/ticket/${row._id}`}>{row.subject}</Link>\n                </td>\n                <td>{row.status}</td>\n                <td\n                  style={{\n                    backgroundColor:\n                      row.priority == \"Elevée\"\n                        ? \"red\"\n                        : row.priority == \"Moyenne\"\n                        ? \"orange\"\n                        : \"green\",\n                  }}\n                >\n                  {row.priority}\n                </td>\n                <td>{row.openAt && new Date(row.openAt).toLocaleString()}</td>\n              </tr>\n            ))\n          ) : (\n            <tr>\n              <td colSpan=\"5\" className=\"text-center\">\n                Vous n'avez auncun ticket de reclamation en cours{\"\"}\n              </td>\n            </tr>\n          )}\n        </tbody>\n          </Table> */}\n      <BootstrapTable\n        classes=\"table table-striped table-dark\"\n        hover\n        keyField=\"id\"\n        data={data}\n        columns={columns}\n        responsive\n        pagination={paginationFactory()}\n      />\n    </Container>\n  );\n};\n","/Users/drissjd/Desktop/AgileProject/agile_frontend/src/components/update-ticket/UpdateTicket.comp.js",[],"/Users/drissjd/Desktop/AgileProject/agile_frontend/src/components/message-history/MessageHistory.comp.js",["184","185","186"],"import React, { useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getUserProfile } from \"../../pages/dashboard/userAction\";\n\nimport \"./MessageHistory.style.css\";\nexport const MessageHistory = ({ msg }) => {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(getUserProfile());\n  }, [dispatch]);\n\n  const { user } = useSelector((state) => state.user);\n  console.log(msg);\n  if (!msg) return null;\n  return msg.map((row, i) => (\n    <div\n      key={i}\n      style={{\n        \"flex-direction\": row.sender == user.name ? \"row\" : \"row-reverse\",\n        color: row.sender == user.name ? \"black\" : \"blue\",\n      }}\n      className=\"message-history mt-3\"\n    >\n      <div\n        className=\"send font-weight-bold text-secondary\"\n        style={{\n          \"box-shadow\": \" 0px 0px 30px orangered\",\n          \"border-radius\": \"1rem\",\n          padding: \"1rem\",\n          \"flex-direction\": row.sender == user.name ? \"row\" : \"row-reverse\",\n        }}\n      >\n        <div className=\"sender\">{row.sender}</div>\n        <div className=\"date\">\n          {row.msgAt && new Date(row.msgAt).toLocaleString()}\n        </div>\n      </div>\n      <div className=\"message\"> {row.message}</div>\n    </div>\n  ));\n};\n\nMessageHistory.propTypes = {\n  msg: PropTypes.array.isRequired,\n};\n","/Users/drissjd/Desktop/AgileProject/agile_frontend/src/password-reset/PasswordReset.comp.js",[],"/Users/drissjd/Desktop/AgileProject/agile_frontend/src/components/search-form/SearchForm.comp.js",["187"],"import React from \"react\";\nimport { Form, Row, Col } from \"react-bootstrap\";\nimport { useDispatch } from \"react-redux\";\nimport { filterSearchTicket } from \"../../pages/ticket-lists/ticketsAction\";\nimport PropTypes from \"prop-types\";\nexport const SearchForm = () => {\n  const dispatch = useDispatch();\n  const handleOnChange = (e) => {\n    const { value } = e.target;\n    dispatch(filterSearchTicket(value));\n    console.log(value);\n  };\n  //console.log(str);\n  return (\n    <div>\n      <Form>\n        <Form.Group as={Row}>\n          <Form.Label\n            column\n            sm=\"3\"\n            style={{ color: \"white\", boxShadow: \"0px 3px 9px black\" }}\n          >\n            Rechercher:\n          </Form.Label>\n          <Col sm=\"9\">\n            <Form.Control\n              name=\"searchStr\"\n              onChange={handleOnChange}\n              placeholder=\"Rechercher ...\"\n            ></Form.Control>\n          </Col>\n        </Form.Group>\n      </Form>\n    </div>\n  );\n};\n","/Users/drissjd/Desktop/AgileProject/agile_frontend/src/api/userApi.js",[],"/Users/drissjd/Desktop/AgileProject/agile_frontend/src/api/ticketApi.js",[],"/Users/drissjd/Desktop/AgileProject/agile_frontend/src/components/registration-form/userRegAction.js",[],"/Users/drissjd/Desktop/AgileProject/agile_frontend/src/components/add-ticket-from/add-ticketAction.js",[],"/Users/drissjd/Desktop/AgileProject/agile_frontend/src/utils/validation.js",[],{"ruleId":"188","severity":1,"message":"189","line":2,"column":10,"nodeType":"190","messageId":"191","endLine":2,"endColumn":16},{"ruleId":"188","severity":1,"message":"192","line":4,"column":10,"nodeType":"190","messageId":"191","endLine":4,"endColumn":23},{"ruleId":"188","severity":1,"message":"193","line":9,"column":50,"nodeType":"190","messageId":"191","endLine":9,"endColumn":54},{"ruleId":"188","severity":1,"message":"194","line":12,"column":9,"nodeType":"190","messageId":"191","endLine":12,"endColumn":20},{"ruleId":"188","severity":1,"message":"195","line":15,"column":15,"nodeType":"190","messageId":"191","endLine":15,"endColumn":21},{"ruleId":"188","severity":1,"message":"196","line":4,"column":8,"nodeType":"190","messageId":"191","endLine":4,"endColumn":15},{"ruleId":"188","severity":1,"message":"197","line":16,"column":10,"nodeType":"190","messageId":"191","endLine":16,"endColumn":16},{"ruleId":"188","severity":1,"message":"198","line":16,"column":18,"nodeType":"190","messageId":"191","endLine":16,"endColumn":27},{"ruleId":"199","severity":1,"message":"200","line":26,"column":5,"nodeType":"201","messageId":"202","endLine":33,"endColumn":6},{"ruleId":"188","severity":1,"message":"203","line":40,"column":9,"nodeType":"190","messageId":"191","endLine":40,"endColumn":23},{"ruleId":"188","severity":1,"message":"204","line":43,"column":9,"nodeType":"190","messageId":"191","endLine":43,"endColumn":23},{"ruleId":"188","severity":1,"message":"196","line":8,"column":8,"nodeType":"190","messageId":"191","endLine":8,"endColumn":15},{"ruleId":"188","severity":1,"message":"195","line":12,"column":15,"nodeType":"190","messageId":"191","endLine":12,"endColumn":21},{"ruleId":"188","severity":1,"message":"205","line":1,"column":27,"nodeType":"190","messageId":"191","endLine":1,"endColumn":36},{"ruleId":"188","severity":1,"message":"203","line":17,"column":9,"nodeType":"190","messageId":"191","endLine":17,"endColumn":23},{"ruleId":"188","severity":1,"message":"204","line":26,"column":9,"nodeType":"190","messageId":"191","endLine":26,"endColumn":23},{"ruleId":"206","severity":1,"message":"207","line":26,"column":6,"nodeType":"208","endLine":26,"endColumn":16,"suggestions":"209"},{"ruleId":"188","severity":1,"message":"210","line":1,"column":8,"nodeType":"190","messageId":"191","endLine":1,"endColumn":13},{"ruleId":"188","severity":1,"message":"211","line":6,"column":3,"nodeType":"190","messageId":"191","endLine":6,"endColumn":6},{"ruleId":"188","severity":1,"message":"212","line":7,"column":3,"nodeType":"190","messageId":"191","endLine":7,"endColumn":6},{"ruleId":"188","severity":1,"message":"213","line":13,"column":8,"nodeType":"190","messageId":"191","endLine":13,"endColumn":17},{"ruleId":"206","severity":1,"message":"214","line":39,"column":6,"nodeType":"208","endLine":39,"endColumn":39,"suggestions":"215"},{"ruleId":"188","severity":1,"message":"216","line":20,"column":7,"nodeType":"190","messageId":"191","endLine":20,"endColumn":15},{"ruleId":"188","severity":1,"message":"193","line":5,"column":10,"nodeType":"190","messageId":"191","endLine":5,"endColumn":14},{"ruleId":"188","severity":1,"message":"217","line":6,"column":10,"nodeType":"190","messageId":"191","endLine":6,"endColumn":21},{"ruleId":"188","severity":1,"message":"218","line":7,"column":8,"nodeType":"190","messageId":"191","endLine":7,"endColumn":16},{"ruleId":"188","severity":1,"message":"219","line":2,"column":10,"nodeType":"190","messageId":"191","endLine":2,"endColumn":20},{"ruleId":"188","severity":1,"message":"220","line":3,"column":10,"nodeType":"190","messageId":"191","endLine":3,"endColumn":15},{"ruleId":"188","severity":1,"message":"212","line":3,"column":28,"nodeType":"190","messageId":"191","endLine":3,"endColumn":31},{"ruleId":"221","severity":1,"message":"222","line":20,"column":38,"nodeType":"223","messageId":"224","endLine":20,"endColumn":40},{"ruleId":"221","severity":1,"message":"222","line":21,"column":27,"nodeType":"223","messageId":"224","endLine":21,"endColumn":29},{"ruleId":"221","severity":1,"message":"222","line":31,"column":40,"nodeType":"223","messageId":"224","endLine":31,"endColumn":42},{"ruleId":"188","severity":1,"message":"213","line":5,"column":8,"nodeType":"190","messageId":"191","endLine":5,"endColumn":17},"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'DefaultLayout' is defined but never used.","'Link' is defined but never used.","'refreshPage' is assigned a value but never used.","'setStr' is assigned a value but never used.","'tickets' is defined but never used.","'ticket' is assigned a value but never used.","'setTicket' is assigned a value but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'handleOnChange' is assigned a value but never used.","'handleOnSubmit' is assigned a value but never used.","'useEffect' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dt'. Either include it or remove the dependency array.","ArrayExpression",["225"],"'axios' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'PropTypes' is defined but never used.","React Hook useEffect has a missing dependency: 'successMsg'. Either include it or remove the dependency array.",["226"],"'location' is assigned a value but never used.","'useDispatch' is defined but never used.","'Collapse' is defined but never used.","'BoxLoading' is defined but never used.","'Table' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",{"desc":"227","fix":"228"},{"desc":"229","fix":"230"},"Update the dependencies array to be: [dt, response]",{"range":"231","text":"232"},"Update the dependencies array to be: [dispatch, frmData, frmDataError, successMsg]",{"range":"233","text":"234"},[684,694],"[dt, response]",[1096,1129],"[dispatch, frmData, frmDataError, successMsg]"]