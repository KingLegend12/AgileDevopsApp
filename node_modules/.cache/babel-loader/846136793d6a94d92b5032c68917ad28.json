{"ast":null,"code":"import axios from \"axios\";\nimport { fetchTicketLoading, fetchTicketSuccess, fetchTicketFail, searchTickets, fetchSingleTicketLoading, fetchSingleTicketSuccess, fetchSingleTicketFail, replyTicketLoading, replyTicketSuccess, replyTicketFail, closeTicketLoading, closeTicketSuccess, closeTicketFail } from \"./ticketSlice\";\nimport { getAllTickets, getSingleTicket, updateReplyTicket, updateTicketStatusClosed } from \"../../api/ticketApi\";\nexport const fetchAllTickets = () => async dispatch => {\n  dispatch(fetchTicketLoading());\n\n  try {\n    const result = await getAllTickets();\n    dispatch(fetchTicketSuccess(result.data.result));\n\n    if (!result.data.result) {\n      dispatch(fetchTicketFail({\n        message: \"error couldn't load\"\n      }));\n    } //console.log(result);\n\n  } catch (error) {\n    dispatch(fetchTicketFail(error.message));\n  }\n};\nexport const filterSearchTicket = str => dispatch => {\n  dispatch(searchTickets(str));\n};\nexport const fetchSingleTicket = _id => async dispatch => {\n  dispatch(fetchSingleTicketLoading());\n\n  try {\n    const result = await getSingleTicket(_id);\n    dispatch(fetchSingleTicketSuccess(result.data.result.length && result.data.result[0]));\n  } catch (error) {\n    dispatch(fetchSingleTicketFail(error.message));\n  }\n};\nexport const replyOnTicket = (_id, msgObj) => async dispatch => {\n  dispatch(replyTicketLoading());\n\n  try {\n    const result = await updateReplyTicket(_id, msgObj);\n    console.log(result);\n\n    if (result.status === \"error\") {\n      return dispatch(replyTicketFail(result.message));\n    }\n\n    dispatch(fetchSingleTicket(_id));\n    dispatch(replyTicketSuccess(\"Message envoyée avec succes\"));\n  } catch (error) {\n    console.log(error.message);\n    dispatch(replyTicketFail(error.message));\n  }\n};\nexport const closeTicket = _id => async dispatch => {\n  dispatch(closeTicketLoading());\n\n  try {\n    const result = await updateTicketStatusClosed(_id);\n\n    if (result.status === \"error\") {\n      return dispatch(closeTicketFail(result.message));\n    }\n\n    dispatch(fetchSingleTicket(_id));\n    dispatch(closeTicketSuccess(\"Ce ticket est fermé\"));\n  } catch (error) {\n    console.log(error.message);\n    dispatch(closeTicketFail(error.message));\n  }\n};","map":{"version":3,"sources":["/Users/drissjd/Desktop/AgileProject/agile_frontend/src/pages/ticket-lists/ticketsAction.js"],"names":["axios","fetchTicketLoading","fetchTicketSuccess","fetchTicketFail","searchTickets","fetchSingleTicketLoading","fetchSingleTicketSuccess","fetchSingleTicketFail","replyTicketLoading","replyTicketSuccess","replyTicketFail","closeTicketLoading","closeTicketSuccess","closeTicketFail","getAllTickets","getSingleTicket","updateReplyTicket","updateTicketStatusClosed","fetchAllTickets","dispatch","result","data","message","error","filterSearchTicket","str","fetchSingleTicket","_id","length","replyOnTicket","msgObj","console","log","status","closeTicket"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SACEC,kBADF,EAEEC,kBAFF,EAGEC,eAHF,EAIEC,aAJF,EAKEC,wBALF,EAMEC,wBANF,EAOEC,qBAPF,EAQEC,kBARF,EASEC,kBATF,EAUEC,eAVF,EAWEC,kBAXF,EAYEC,kBAZF,EAaEC,eAbF,QAcO,eAdP;AAgBA,SACEC,aADF,EAEEC,eAFF,EAGEC,iBAHF,EAIEC,wBAJF,QAKO,qBALP;AAMA,OAAO,MAAMC,eAAe,GAAG,MAAM,MAAOC,QAAP,IAAoB;AACvDA,EAAAA,QAAQ,CAAClB,kBAAkB,EAAnB,CAAR;;AAEA,MAAI;AACF,UAAMmB,MAAM,GAAG,MAAMN,aAAa,EAAlC;AACAK,IAAAA,QAAQ,CAACjB,kBAAkB,CAACkB,MAAM,CAACC,IAAP,CAAYD,MAAb,CAAnB,CAAR;;AACA,QAAI,CAACA,MAAM,CAACC,IAAP,CAAYD,MAAjB,EAAyB;AACvBD,MAAAA,QAAQ,CAAChB,eAAe,CAAC;AAAEmB,QAAAA,OAAO,EAAE;AAAX,OAAD,CAAhB,CAAR;AACD,KALC,CAMF;;AACD,GAPD,CAOE,OAAOC,KAAP,EAAc;AACdJ,IAAAA,QAAQ,CAAChB,eAAe,CAACoB,KAAK,CAACD,OAAP,CAAhB,CAAR;AACD;AACF,CAbM;AAeP,OAAO,MAAME,kBAAkB,GAAIC,GAAD,IAAUN,QAAD,IAAc;AACvDA,EAAAA,QAAQ,CAACf,aAAa,CAACqB,GAAD,CAAd,CAAR;AACD,CAFM;AAIP,OAAO,MAAMC,iBAAiB,GAAIC,GAAD,IAAS,MAAOR,QAAP,IAAoB;AAC5DA,EAAAA,QAAQ,CAACd,wBAAwB,EAAzB,CAAR;;AACA,MAAI;AACF,UAAMe,MAAM,GAAG,MAAML,eAAe,CAACY,GAAD,CAApC;AACAR,IAAAA,QAAQ,CACNb,wBAAwB,CACtBc,MAAM,CAACC,IAAP,CAAYD,MAAZ,CAAmBQ,MAAnB,IAA6BR,MAAM,CAACC,IAAP,CAAYD,MAAZ,CAAmB,CAAnB,CADP,CADlB,CAAR;AAKD,GAPD,CAOE,OAAOG,KAAP,EAAc;AACdJ,IAAAA,QAAQ,CAACZ,qBAAqB,CAACgB,KAAK,CAACD,OAAP,CAAtB,CAAR;AACD;AACF,CAZM;AAcP,OAAO,MAAMO,aAAa,GAAG,CAACF,GAAD,EAAMG,MAAN,KAAiB,MAAOX,QAAP,IAAoB;AAChEA,EAAAA,QAAQ,CAACX,kBAAkB,EAAnB,CAAR;;AACA,MAAI;AACF,UAAMY,MAAM,GAAG,MAAMJ,iBAAiB,CAACW,GAAD,EAAMG,MAAN,CAAtC;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYZ,MAAZ;;AACA,QAAIA,MAAM,CAACa,MAAP,KAAkB,OAAtB,EAA+B;AAC7B,aAAOd,QAAQ,CAACT,eAAe,CAACU,MAAM,CAACE,OAAR,CAAhB,CAAf;AACD;;AAEDH,IAAAA,QAAQ,CAACO,iBAAiB,CAACC,GAAD,CAAlB,CAAR;AAEAR,IAAAA,QAAQ,CAACV,kBAAkB,CAAC,6BAAD,CAAnB,CAAR;AACD,GAVD,CAUE,OAAOc,KAAP,EAAc;AACdQ,IAAAA,OAAO,CAACC,GAAR,CAAYT,KAAK,CAACD,OAAlB;AACAH,IAAAA,QAAQ,CAACT,eAAe,CAACa,KAAK,CAACD,OAAP,CAAhB,CAAR;AACD;AACF,CAhBM;AAkBP,OAAO,MAAMY,WAAW,GAAIP,GAAD,IAAS,MAAOR,QAAP,IAAoB;AACtDA,EAAAA,QAAQ,CAACR,kBAAkB,EAAnB,CAAR;;AACA,MAAI;AACF,UAAMS,MAAM,GAAG,MAAMH,wBAAwB,CAACU,GAAD,CAA7C;;AACA,QAAIP,MAAM,CAACa,MAAP,KAAkB,OAAtB,EAA+B;AAC7B,aAAOd,QAAQ,CAACN,eAAe,CAACO,MAAM,CAACE,OAAR,CAAhB,CAAf;AACD;;AAEDH,IAAAA,QAAQ,CAACO,iBAAiB,CAACC,GAAD,CAAlB,CAAR;AAEAR,IAAAA,QAAQ,CAACP,kBAAkB,CAAC,qBAAD,CAAnB,CAAR;AACD,GATD,CASE,OAAOW,KAAP,EAAc;AACdQ,IAAAA,OAAO,CAACC,GAAR,CAAYT,KAAK,CAACD,OAAlB;AACAH,IAAAA,QAAQ,CAACN,eAAe,CAACU,KAAK,CAACD,OAAP,CAAhB,CAAR;AACD;AACF,CAfM","sourcesContent":["import axios from \"axios\";\n\nimport {\n  fetchTicketLoading,\n  fetchTicketSuccess,\n  fetchTicketFail,\n  searchTickets,\n  fetchSingleTicketLoading,\n  fetchSingleTicketSuccess,\n  fetchSingleTicketFail,\n  replyTicketLoading,\n  replyTicketSuccess,\n  replyTicketFail,\n  closeTicketLoading,\n  closeTicketSuccess,\n  closeTicketFail,\n} from \"./ticketSlice\";\n\nimport {\n  getAllTickets,\n  getSingleTicket,\n  updateReplyTicket,\n  updateTicketStatusClosed,\n} from \"../../api/ticketApi\";\nexport const fetchAllTickets = () => async (dispatch) => {\n  dispatch(fetchTicketLoading());\n\n  try {\n    const result = await getAllTickets();\n    dispatch(fetchTicketSuccess(result.data.result));\n    if (!result.data.result) {\n      dispatch(fetchTicketFail({ message: \"error couldn't load\" }));\n    }\n    //console.log(result);\n  } catch (error) {\n    dispatch(fetchTicketFail(error.message));\n  }\n};\n\nexport const filterSearchTicket = (str) => (dispatch) => {\n  dispatch(searchTickets(str));\n};\n\nexport const fetchSingleTicket = (_id) => async (dispatch) => {\n  dispatch(fetchSingleTicketLoading());\n  try {\n    const result = await getSingleTicket(_id);\n    dispatch(\n      fetchSingleTicketSuccess(\n        result.data.result.length && result.data.result[0]\n      )\n    );\n  } catch (error) {\n    dispatch(fetchSingleTicketFail(error.message));\n  }\n};\n\nexport const replyOnTicket = (_id, msgObj) => async (dispatch) => {\n  dispatch(replyTicketLoading());\n  try {\n    const result = await updateReplyTicket(_id, msgObj);\n    console.log(result);\n    if (result.status === \"error\") {\n      return dispatch(replyTicketFail(result.message));\n    }\n\n    dispatch(fetchSingleTicket(_id));\n\n    dispatch(replyTicketSuccess(\"Message envoyée avec succes\"));\n  } catch (error) {\n    console.log(error.message);\n    dispatch(replyTicketFail(error.message));\n  }\n};\n\nexport const closeTicket = (_id) => async (dispatch) => {\n  dispatch(closeTicketLoading());\n  try {\n    const result = await updateTicketStatusClosed(_id);\n    if (result.status === \"error\") {\n      return dispatch(closeTicketFail(result.message));\n    }\n\n    dispatch(fetchSingleTicket(_id));\n\n    dispatch(closeTicketSuccess(\"Ce ticket est fermé\"));\n  } catch (error) {\n    console.log(error.message);\n    dispatch(closeTicketFail(error.message));\n  }\n};\n"]},"metadata":{},"sourceType":"module"}