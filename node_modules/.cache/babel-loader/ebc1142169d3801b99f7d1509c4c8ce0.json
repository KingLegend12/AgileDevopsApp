{"ast":null,"code":"import _regeneratorRuntime from\"/Users/drissjd/Desktop/InternShipApp/internship_frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/drissjd/Desktop/InternShipApp/internship_frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{getUserPending,getUserSuccess,getUserFail}from\"./userSlice\";import{fetchUser}from\"../../api/userApi\";export var getUserProfile=function getUserProfile(){return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch){var result;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;dispatch(getUserPending());_context.next=4;return fetchUser();case 4:result=_context.sent;if(!(result.user&&result.user._id)){_context.next=7;break;}return _context.abrupt(\"return\",dispatch(getUserSuccess(result.user)));case 7:dispatch(getUserFail(\"User is not found\"));_context.next=13;break;case 10:_context.prev=10;_context.t0=_context[\"catch\"](0);dispatch(getUserFail(_context.t0));case 13:case\"end\":return _context.stop();}}},_callee,null,[[0,10]]);}));return function(_x){return _ref.apply(this,arguments);};}();};","map":{"version":3,"sources":["/Users/drissjd/Desktop/InternShipApp/internship_frontend/src/pages/dashboard/userAction.js"],"names":["getUserPending","getUserSuccess","getUserFail","fetchUser","getUserProfile","dispatch","result","user","_id"],"mappings":"2VAAA,OAASA,cAAT,CAAyBC,cAAzB,CAAyCC,WAAzC,KAA4D,aAA5D,CACA,OAASC,SAAT,KAA0B,mBAA1B,CAEA,MAAO,IAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,kGAAM,iBAAOC,QAAP,6IAEhCA,QAAQ,CAACL,cAAc,EAAf,CAAR,CAFgC,sBAIXG,CAAAA,SAAS,EAJE,QAI1BG,MAJ0B,oBAM5BA,MAAM,CAACC,IAAP,EAAeD,MAAM,CAACC,IAAP,CAAYC,GANC,0DAOvBH,QAAQ,CAACJ,cAAc,CAACK,MAAM,CAACC,IAAR,CAAf,CAPe,SAShCF,QAAQ,CAACH,WAAW,CAAC,mBAAD,CAAZ,CAAR,CATgC,iFAWhCG,QAAQ,CAACH,WAAW,aAAZ,CAAR,CAXgC,qEAAN,gEAAvB","sourcesContent":["import { getUserPending, getUserSuccess, getUserFail } from \"./userSlice\";\nimport { fetchUser } from \"../../api/userApi\";\n\nexport const getUserProfile = () => async (dispatch) => {\n  try {\n    dispatch(getUserPending());\n\n    const result = await fetchUser();\n\n    if (result.user && result.user._id)\n      return dispatch(getUserSuccess(result.user));\n\n    dispatch(getUserFail(\"User is not found\"));\n  } catch (error) {\n    dispatch(getUserFail(error));\n  }\n};\n"]},"metadata":{},"sourceType":"module"}